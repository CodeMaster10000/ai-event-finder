"""added event embedding column and index

Revision ID: bc15c515f1f2
Revises: 276758c52645
Create Date: 2025-08-12 13:56:43.926888

"""
import pgvector
from alembic import op
import sqlalchemy as sa
from pgvector.sqlalchemy.vector import VECTOR


# revision identifiers, used by Alembic.
revision = 'bc15c515f1f2'
down_revision = '276758c52645'
branch_labels = None
depends_on = None


def upgrade():
    bind = op.get_bind()
    if bind.dialect.name == "postgresql":
        # enable pgvector in this database if not already enabled
        op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.add_column(sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), nullable=False))



    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('user_email_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)

    # ### end Alembic commands ###
    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.execute("""
                        DO $$
                        BEGIN
                          IF NOT EXISTS (
                            SELECT 1
                            FROM   pg_class c
                            JOIN   pg_namespace n ON n.oid = c.relnamespace
                            WHERE  c.relname = 'idx_events_embedding_l2'
                              AND n.nspname = 'public'
                          ) THEN
                            CREATE INDEX idx_events_embedding_l2
                            ON events USING ivfflat (embedding vector_l2_ops)
                            WITH (lists = 100);
                          END IF;
                        END
                        $$;
                    """)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))
        batch_op.create_unique_constraint(batch_op.f('user_email_key'), ['email'])

    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.drop_column('embedding')

    # ### end Alembic commands ###
